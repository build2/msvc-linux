Setup
=====

Setting Scripts
---------------

@@ Replace this section with a proper package build/install instructions when
   the package name is finalized.
@@ Interestingly INSTALL files for our packages provide instuctions how to
   build the package but not how to install it.

The "driver" scripts that you will be invoking are cl-NN, link-NN, lib-NN,
etc., where NN is the Visual Studio version (e.g., 11, 12, 14, etc). There
are also the "configuration" scripts, msvc-NN, which provide the Visual
Studio/SDK location and configuration (in a way similar to vcvars32.bat).
There is also a bunch of other helper scripts that you will not need to
modify or invoke directly.

It is also required to build msvc-filter utility. To do that run build2 in the
project's directory.

All of these scripts and utility should reside in the same directory. In
particular, you cannot copy, say, cl-NN to /usr/local/bin/ while leaving the
rest in some other directory -- this will not work. What you can do, however,
is create symlinks to the driver scripts in /usr/local/bin/ -- this will work.

If you only need to make the scripts usable by a single user, then the easiest
approach is to add the script's directory to your PATH in, say, .bashrc, for
example:

export PATH=$HOME/msvc-linux:$PATH

Alternatively, if you have something like ~/bin/ that is already in PATH, then
you can simply add symlinks to the scripts.


Install Wine
------------

You need 1.7.55 or later. Previous versions are known not to work with Visual
Studio 14.

For Ubuntu, to install stable:

# add-apt-repository ppa:ubuntu-wine/ppa
# apt-get update
# apt-get install --no-install-recommends winbind
# apt-get install wine1.7
# apt-get install p11-kit-modules:i386 libp11-kit-gnome-keyring:i386

For Ubuntu, to install staging (into /opt/):

# add-apt-repository ppa:wine/wine-builds
# apt-get update
# apt-get install --install-recommends wine-staging

To install compatibility symlinks:

# apt-get install winehq-staging


Configure Wine
--------------

$ winecfg

If it suggests installing some stuff (Gecko, Mono), refuse. Change the
platform to Windows 7 (later version will probably also work).

64-bit link.exe from Visual Studio 14 is known not to work with Mono that
may have (still) been installed by winecfg. To remove it, run:

$ wine64 uninstaller --remove '{E45D8920-A758-4088-B6C6-31DBB276992E}'


Prepare to Copy Visual Studio
-----------------------------

Note that below we assume that you have installed Visual Studio in the default
location.

The following instructions are for mounting the VM parition on Linux host.
However, simply archiving the required directories on the running VM and
copying them to the Linux host should work as well.

Mount the VM disk (make sure it is not running) where you installed Visual
Studio. First get the second partition offset (<O>) and sector size (normally
512, as below).

# fdisk -lu .../windows-7.img

Then mount via the loopback device:

# losetup -o $((512*<O>)) /dev/loop0 ./windows-7.img
# mount -o ro /dev/loop0 /mnt

When finished copying Visual Studio, unmount and delete the loopback:

# umount /mnt
# losetup -d /dev/loop0


Copy and Setup Visual Studio 11
-------------------------------

$ mkdir -p ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 11.0"
$ cp -r "/mnt/Program Files (x86)/Microsoft Visual Studio 11.0/VC" \
  ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 11.0/"
$ cp "/mnt/Program Files (x86)/Microsoft Visual Studio 11.0/Common7/IDE/mspdb110.dll" \
  ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 11.0/VC/bin/"

$ mkdir -p ".wine/drive_c/Program Files (x86)/Windows Kits"
$ cp -r "/mnt/Program Files (x86)/Windows Kits/8.0" \
  ".wine/drive_c/Program Files (x86)/Windows Kits/"

Add lower-case symlinks for upper-case named headers:

$ etc/lowercase-headers \
  ".wine/drive_c/Program Files (x86)/Windows Kits/8.0/Include"

Run the VC11 redistributable DLLs installer for both x64 and x86 from
.../VC/redist/1033/.

Add overrides for msvcr110.dll and msvcp110.dll: run winecfg, select the
"Libraries" tab, then enter the DLL name and "Add".


Copy and Setup Visual Studio 12
-------------------------------

$ mkdir -p ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 12.0"
$ cp -r "/mnt/Program Files (x86)/Microsoft Visual Studio 12.0/VC" \
  ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 12.0/"

$ mkdir -p ".wine/drive_c/Program Files (x86)/Windows Kits"
$ cp -r "/mnt/Program Files (x86)/Windows Kits/8.1" \
  ".wine/drive_c/Program Files (x86)/Windows Kits/"

Add lower-case symlinks for upper-case named headers:

$ etc/lowercase-headers \
  ".wine/drive_c/Program Files (x86)/Windows Kits/8.1/Include"

Run the VC12 redistributable DLLs installer for both x64 and x86 from
.../VC/redist/1033/.

Add overrides for msvcr120.dll and msvcp120.dll: run winecfg, select the
"Libraries" tab, then enter the DLL name and "Add".


Copy and Setup Visual Studio 14
-------------------------------

Note: If using 14 Update 2, then use the *-14u2 driver scripts.
Note: 14 Update 2 requires Wine 1.9 or later (bug #34851).
Note: 14 Update 2 is known to work with Wine 1.9.7, 1.9.8 but not 1.9.15.

$ mkdir -p ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 14.0"
$ cp -r "/mnt/Program Files (x86)/Microsoft Visual Studio 14.0/VC" \
  ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 14.0/"
$ cp "/mnt/Program Files (x86)/Microsoft Visual Studio 14.0/VC/redist/x86/Microsoft.VC140.CRT/msvcp140.dll" \
  ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 14.0/VC/bin/"

Remove Microsoft's "experience improvement data uploade" which crashes:

$ find ".wine/drive_c/Program Files (x86)/Microsoft Visual Studio 14.0/" \
  -name vctip.exe -exec rm -f '{}' ';'

$ mkdir -p ".wine/drive_c/Program Files (x86)/Windows Kits"
$ cp -r "/mnt/Program Files (x86)/Windows Kits/8.1" \
  ".wine/drive_c/Program Files (x86)/Windows Kits/"
$ cp -r "/mnt/Program Files (x86)/Windows Kits/10" \
  ".wine/drive_c/Program Files (x86)/Windows Kits/"

Add lower-case symlinks for upper-case named headers:

$ etc/lowercase-headers \
  ".wine/drive_c/Program Files (x86)/Windows Kits/8.1/Include" \
  ".wine/drive_c/Program Files (x86)/Windows Kits/10/Include"

Installing via the redistributable DLLs still does not work as of Wine 1.7.55.
Instead, we have to manually copy a bunch of DLLs from /mnt/Windows/{SysWoW64/
System32/} to .wine/drive_c/windows/{syswow64/ system32/} and add Wine
overrides (run winecfg, select the "Libraries" tab, then enter the DLL name
and press "Add").

To discover the list of DLLs, run cl-14 to compile and link and an executable
and then run the executable itself (see Test below): any DLL that causes an
error needs an override.

For Wine 1.7.55-1.9.8 the list is:

  api-ms-win-crt-runtime-l1-1-0.dll
  api-ms-win-crt-locale-l1-1-0.dll
  api-ms-win-crt-heap-l1-1-0.dll
  api-ms-win-crt-stdio-l1-1-0.dll
  api-ms-win-crt-conio-l1-1-0.dll
  ucrtbase.dll
  vcruntime140.dll
  msvcp140.dll

The following overrides are necessary because of some unimplemented functions:

  api-ms-win-crt-string-l1-1-0.dll
  api-ms-win-crt-time-l1-1-0.dll


Test
----

cl-NN /EHsc /MD /TP hello-world.cxx
./hello-world.exe


Usage
=====

To suppress Wine debug messages (especially advisable if running executables
built with more recent Visual Studio versions) you may want to add the
following line to your .bashrc or similar:

export WINEDEBUG=fixme-all
